
#include <bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data;
    Node* next;
    Node* prev;
};

void push(Node** head,int value){
    Node* new_node= new Node();
    new_node->data=value;
    new_node->next=*head;
    new_node->prev = NULL;
    
    if(*head != NULL)
        (*head)->prev = new_node;
    
    *head = new_node;
}

void insertAfter(Node* prev_node,int value){
    if(prev_node==NULL){
        return;
    }
    
    Node* new_node = new Node();
    new_node->data=value;
    new_node->next = prev_node->next;
    prev_node->next= new_node;
    new_node->prev = prev_node;
    
    if(new_node->next!=NULL)
           new_node->next->prev=new_node;
      
}


void insertAfter(Node* next_node,int value){
    if(next_node == NULL){
        return;
    }
    
    Node* new_node = new Node();
    new_node->data = value;
    new_node->prev=next_node->prev;
    next_node->prev = new_node;
    new_node->next = next_node;
    
    
    if(new_node->prev != NULL)
       new_node->prev->next = new_node;
    else
        head = new_node;
}


void append(Node** head_ref, int new_data)
{
    // 1. allocate node
    Node* new_node = new Node();
 
    Node* last = *head_ref; 
    new_node->data = new_data;
 
    new_node->next = NULL;
 
    if (*head_ref == NULL) {
        new_node->prev = NULL;
        *head_ref = new_node;
        return;
    }

    while (last->next != NULL)
        last = last->next;

    last->next = new_node;
    new_node->prev = last;
 
    return;
}

int main() {
    Node* head= NULL;
     push(&head,23);
     push(&head,45);
     push(&head,54);
   

    return 0;
}
