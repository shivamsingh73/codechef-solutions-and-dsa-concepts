#include<bits/stdc++.h>
using namespace std;

class Node{
    public:
    int data;
    Node* next;

    Node(int d){
       data=d;
       Node* next=NULL;
    }
};

void insert_at_first_node(Node** head,int data){
    Node* new_node=new Node(data);
    new_node->next = 
    *head ;
    *head= new_node; 
}

void printll(Node* head){
    while(head!=NULL){
        cout<<head->data<<" ";
        head=head->next;
    }
}


void deleteAtFirstNode(Node** head){
    if(head==NULL){
        return;
    }
    Node* temp=*head;
    *head=(*head)->next;
    delete temp;
    return;
    

}


void deleteatTail(Node** head){
Node* prev=NULL;
Node* temp= head;

while(temp->next!=NULL){
    prev=temp;
    temp=temp->next;
}
delete temp;
prev->next=NULL;
return;
}



// Node* temp = *head_ref;
  
//     // If head needs to be removed
//     if (position == 0) {
  
//         // Change head
//         *head_ref = temp->next;
  
//         // Free old head
//         free(temp);
//         return;
//     }
  
//     // Find previous node of the node to be deleted
//     for (int i = 0; temp != NULL && i < position - 1; i++)
//         temp = temp->next;
  
//     // If position is more than number of nodes
//     if (temp == NULL || temp->next == NULL)
//         return;
  
//     // Node temp->next is the node to be deleted
//     // Store pointer to the next of node to be deleted
//     Node* next = temp->next->next;
  
//     // Unlink the node from linked list
//     free(temp->next); // Free memory
  
//     // Unlink the deleted node from list
//     temp->next = next;
// }


int main(){

Node* head=NULL;

insert_at_first_node(&head,1);
   insert_at_first_node(&head,2);
   insert_at_first_node(&head,3);
   insert_at_first_node(&head,4);


printll(head);
cout<<endl;

deleteAtFirstNode(&head);

printll(head);
cout<<endl;

deleteatTail(&head);
printll(head);

    return 0;
}
